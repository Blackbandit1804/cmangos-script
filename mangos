#!/bin/bash

# Script >

############################################################################
#                      C M a N G O S  -  H E L P E R                       #
#               Continued Massive Network Game Object Server               #
############################################################################

# Build on a Ubuntu Server (raspberry pi)
# https://ubuntu.com/download/raspberry-pi

# By Rainman
# V20201601
# 0.8.5.8

###############
# server/info #
###############

source /scripts/server.txt # please edit if wrong.

# Easter egg >

printf "\e[31m
                                    ▄▄▄▄▄
                              ▄▄▄███░░░▒▒▒▓▓
                          ▄▄██░░░▒▒▒▓▓▓          WELCoME To THE \e[1mDARKSiDE\e[0;31m!!
                        ▄█░░▒▒▓▓
▄▄▄▄▄▄                ▄█░▒▓                     ▄▄▄▄▄▄▄                   ▄▄▄▄▄
▒▒▒▒▒▒████████▄▄▄▄   █░▒▓                    ▄██▀▀   ▀▀██▄    ▄▄▄▄████████▒▒▒▒▒
▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒█▀▄▄▄██████▄▄▄          ▄██▀          █▒▓ ██▒▒▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓
      ▓▓▓▓▓▓▓▓▓▓▓ ▄██▀▀      ▀▀▀███▄▄▄ ▄▄██▀      ██     ▓  ▒▒▓▓▓▓▓▓▓▓▓▓▓▓
                 ▓▐█    ▐█         ▀▀▀▄▀▀                ▓  ▓▓
                  ███▄     ▄▄▄▄▄▄▄▀██▀▄▀█░▀█▄▄▄▄▄▄     ▄░▒▓
                 ▐█████████░░▒▒▓▓ ▐▌ ▄█▄ ▐░▒▓████████████░▒▓
                 ▐████░░▒▒▓▓  ▄▄████░▒ ██░▒▓   ▀▀▀███████░▒▓
  \e[1;35mToDAY iS\e[0;31m        █░▒▓▓     ▄███████░▒ ██░░▒▒▓  ▓    ▀▀█░▒▓
     \e[35m$NOW\e[31m    ▀   ▓▓ ▄████████░▒  ▀ █░░▒▒▓    ▓▓▓
                         ▄██▀▀▀▄▄▄ ▐▀▀ █▀▄ ▄▄▄   ▓  ▓
                         ▄▄ █▀ ▐▒   ▀  ▐   ▀▒  █▀ ▄▄
                         ▐▒     ▀           ▀     ▐▒
                          ▀                       ▀\n\e[0m"
printf "

 Explosions! MORE explosions! I got to have more explosions!

 — Sicco Thermaplugg



"

# done

# Menu >

while :
do
clear
printf "\e[31m-----------------------------------------------
    _____ _____     _____ _____ _____ _____
   |     |     |___|   | |   __|     |   __|
   |   --| | | | .'| | | |  |  |  |  |__   |
   |_____|_|_|_|__,|_|___|_____|_____|_____|\n\e[0m"
cat<<EOF
           C(ontinued)-MaNGOS Helper
             --------------------
EOF
id=$(mysql --defaults-extra-file="$sql_mycnf" -N --execute="SELECT SUM(online) FROM $db_characters.characters;"); &> /dev/null
 echo "               Online Players $id"
guilds=$(mysql --defaults-extra-file="$sql_mycnf" -N --execute="SELECT count(*) FROM $db_characters.guild;"); &> /dev/null
 echo "                   Guilds $guilds"
 echo
cat<<EOF
                $load

EOF

# Service status >

# Set column width

COLUMNS=3
services=("mangosd" "realmd")

# Sort services

IFS=$'\n' services=($(sort <<<"${services[*]}"))
unset IFS
service_status=()

# Get status of all services

for service in "${services[@]}"; do
service_status+=($(systemctl is-active "$service"))
done >/dev/null 2>&1
out="     "
for i in ${!services[@]}; do

# Color green if service is active, else red

if [[ "${service_status[$i]}" == "active" ]]; then
out+="${services[$i]}:,${color_green}${service_status[$i]}${color_no},"
else
out+="${services[$i]}:,${color_red}${service_status[$i]}${color_no},"
fi

# Insert \n every $COLUMNS column

if [ $((($i+1) % $COLUMNS)) -eq 0 ]; then
out+="\n"
fi
done
out+="\n"

printf "$out" | column -ts $',' | sed -e 's/^/  /'

# Service status done

cat<<EOF

       Start with checking for updates c)

  a : login (command)      t : characters
  c : check for updates    u : accounts
  m : update CMaNGOS       g : guilds
  d : update Database      p : create .patch file
  s : shutdown server      w : update Helper
  r : restart server       l : check logs
  o : online check         Q : quit

EOF
 read -n1 -s
 case "$REPLY" in

# Menu done

"a")

# Login (command) >

 echo
printf "\e[31m   ._________________.
   |.---------------.|
   || \033[0mmangos>\e[31m       ||
   ||               ||
   ||               ||
   ||               ||
   ||               ||
   ||_______________||
   /.-.-.-.-.-.-.-.-.\\
  /.-.-.-.-.-.-.-.-.-.\\
 /.-.-.-.-.-.-.-.-.-.-.\\
/______/__________\___\e[1;32mo\033[1;31m_\\
\_______________________/\033[0m"
 echo
printf "
 CMaNGOS Command Center

 Account Creation Example

 .account create <username> <password>
 .account set addon <username> <expansion-version>
 .account set gmlevel <username> <level>

  ------------------------------------------------
 'commands' will list all of the available commands
 'quit' and then hit Enter to exit
 "
 echo
nc $host_nc $port_nc
 echo

# Login (command) done

 ;;

"c")

# Check for updates >

printf "Checking mangos-classic (\e[1;32mworld\033[0m) for any updates .."
 echo
sudo chown -R $user:$group $folder_core
cd $folder_core
 sleep 1
git pull
 echo
printf "Checking classic-db (\e[1;32mdatabase\033[0m) for any updates .."
 echo
sudo chown -R $user:$group $folder_db
cd $folder_db
 sleep 1
git pull
 echo
printf "Checking mangos helper (\e[1;32mscript\033[0m) for any updates .."
 echo
sudo chown -R $user:$group $folder_helper
cd $folder_helper
 sleep 1
git pull
 echo
 read -p "Press Enter to continue" </dev/tty
 echo

# Check for updates done

 ;;

"m")

# Update CMaNGOS >

 echo
printf "Update (\e[1;32mMaNGOS\033[0m) ?"
 echo
 read -p "Are you sure? (y/n) " -n 1 -r
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then
 echo "Shutting down Services.."
 echo -ne '(0%)\r'
 sleep 1
sudo service realmd stop &> /dev/null
 echo -ne '(50%)\r'
 sleep 1
sudo service mangosd stop &> /dev/null
 echo -ne '(100%)\r'
sleep 1
printf "Updating mangos-classic (\e[1;32mworld\033[0m) .."
 echo
 read -p "Install Software requirements? (y/n) " -n 1 -r
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then
packagelist=(
checkinstall
build-essential
gcc
g++
automake
git-core
autoconf
make
patch
libmysql++-dev
mysql-server
libtool
libssl-dev
grep
binutils
zlibc
libc6
libbz2-dev
cmake
subversion
libboost-all-dev
)
sudo apt-get install ${packagelist[@]} -y 1> /dev/null
fi

# Fresh install ? >

 read -p "Fresh install? (delete build folder) (y/n) " -n 1 -r
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then
cd
sudo mkdir wow &> /dev/null
sudo chown -R $user:$group $folder_wow
sudo rm -r $folder_core/build/ &> /dev/null
cd $folder_wow
git clone https://github.com/cmangos/mangos-classic.git
sudo mkdir $folder_core/build &> /dev/null
fi

# Fresh install done

sudo chown -R $user:$group $folder_wow
cd $folder_build
cmake .. $cmake
cd $folder_build
make
 echo
printf "Select the install operation"
 echo
 echo " 1) make install"
 echo " 2) checkinstall with backup"
 echo
 read n
case $n in
 1) echo "make install"
cd $folder_build
sudo make install # --directory="$folder_build"
 ;;
 2) echo "checkinstall"
cd $folder_build
sudo checkinstall # --directory="$folder_build"
 ;;
 *) echo "invalid option";;
esac
 echo

# Edit config files ? >

title="Edit .config files"
 echo
prompt="Choose (nano) config file:"
 echo
options=(

"mangos.conf.dist"
"realmd.conf.dist"
"playerbot.conf.dist"

"mangos.conf"
"realmd.conf"
"playerbot.conf"

)

echo "$title"
PS3="$prompt "
select opt in "${options[@]}" "Quit"; do

case "$REPLY" in

 1 ) echo "You picked $opt mangosd.conf.dist $REPLY"
nano $folder_core/run/etc/mangosd.conf.dist;;
 2 ) echo "You picked $opt realmd.conf.dist $REPLY"
nano $folder_core/run/etc/realmd.conf.dist;;
 3 ) echo "You picked $opt playerbot.conf.dist $REPLY"
nano $folder_core/run/etc/playerbot.conf;;

 4 ) echo "You picked $opt mangosd.conf $REPLY"
nano $folder_core/run/etc/mangosd.conf;;
 5 ) echo "You picked $opt realmd.conf $REPLY"
nano $folder_core/run/etc/realmd.conf;;
 6 ) echo "You picked $opt playerbot.conf $REPLY"
nano $folder_core/run/etc/playerbot.conf;;

 $(( ${#options[@]}+1 )) ) echo "Goodbye!"; break;;
 *) echo "Invalid option. Try another one.";continue;;
esac
done

# Edit config files done

 read -p "Press Enter to continue" </dev/tty
fi

# Update CMaNGOS done

 ;;

"d")

# Update Database >

 echo
printf "Update (\e[1;32mDatabase\033[0m) ?"
 echo
 read -p "Are you sure? (y/n) " -n 1 -r
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then
 echo "Shutting down Services.."
 echo -ne '(0%)\r'
 sleep 1
sudo service realmd stop &> /dev/null
 echo -ne '(50%)\r'
 sleep 1
sudo service mangosd stop &> /dev/null
sudo chown -R $user:$group $folder_wow
 echo -ne '(100%)\r'
 sleep 1
 echo

# BACKUP (regardless) >

cd $folder_wow
mkdir backup &> /dev/null

# characters.sql

 echo
FILE="$folder_wow/backup/db_characters-$NOW.sql"
if [ ! -f "$FILE" ];
then
printf "[\e[1;32mok\033[0m] 'Characters' backup."
 echo
else
printf "[\033[1;31mempty\033[0m] 'Characters' doing backup.."
mysqldump --defaults-extra-file="$sql_mycnf" --column-statistics=0 $db_characters > $folder_wow/backup/$db_characters-$NOW.sql
 echo
fi

# realmd.sql

FILE="$folder_wow/backup/db_realmd-$NOW.sql"
if [ ! -f "$FILE" ];
then
printf "[\e[1;32mok\033[0m] 'Realmd' backup."
 echo
else
printf "[\033[1;31mempty\033[0m] 'Realmd' doing backup.."
mysqldump --defaults-extra-file="$sql_mycnf" --column-statistics=0 $db_realmd > $folder_wow/backup/$db_realmd-$NOW.sql
 echo
fi

# BACKUP done

 echo
printf "Updating classic-db (\e[1;32mdatabase\033[0m) .."
 echo
packagelist=(
mysql-server
mysql-client
)
sudo apt-get install ${packagelist[@]} -y 1> /dev/null

# Delete and start over ? >

 read -p "Fresh install? (backup / delete / git clone) (y/n) " -n 1 -r
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then

# Setting Up the cMaNGOS Database.

printf "(\e[1;32mcharacters\033[0m) & (\e[1;32mrealmd\033[0m) backup commencing ..\033[0m"
 echo

# BACKUP >

# characters.sql

FILE="$folder_wow/backup/db_characters-$NOW.sql"
if [ ! -f "$FILE" ];
then
 echo
else
mysqldump --defaults-extra-file="$sql_mycnf" --column-statistics=0 $db_characters > $folder_wow/backup/$db_characters-$NOW.sql
fi

# realmd.sql

FILE="$folder_wow/backup/db_realmd-$NOW.sql"
if [ ! -f "$FILE" ];
then
 echo
else
mysqldump --defaults-extra-file="$sql_mycnf" --column-statistics=0 $db_realmd > $folder_wow/backup/$db_realmd-$NOW.sql
fi

# BACKUP done

# DROP databases >

# Database 'characters'

RESULT=`mysql --defaults-extra-file="$sql_mycnf" -e "SHOW DATABASES" | grep $db_characters`
if [ "$RESULT" == "$db_characters" ]; then
mysqladmin --defaults-extra-file="$sql_mycnf" -f DROP $db_characters;
fi

# Database 'mangos'

RESULT=`mysql --defaults-extra-file="$sql_mycnf" -e "SHOW DATABASES" | grep $db_mangos`
if [ "$RESULT" == "$db_mangos" ]; then
mysqladmin --defaults-extra-file="$sql_mycnf" -f DROP $db_mangos;
fi

# Database 'realmd'

RESULT=`mysql --defaults-extra-file="$sql_mycnf" -e "SHOW DATABASES" | grep $db_realmd`
if [ "$RESULT" == "$db_realmd" ]; then
mysqladmin --defaults-extra-file="$sql_mycnf" -f DROP $db_realmd;
fi

# DROP databases done

# Delete & git clone classic-db folder >

 read -p "Delete & git clone classic-db folder? (y/n) " -n 1 -r
 echo

if [[ $REPLY =~ ^[Yy]$ ]]
then

sudo chown -R $user:$group $folder_wow
cp $folder_db/InstallFullDB.config $folder_wow &> /dev/null
sudo rm -r $folder_db &> /dev/null
cd $folder_wow
git clone https://github.com/cmangos/classic-db.git
mv $folder_wow/*.config $folder_db &> /dev/null
sudo chown -R $user:$group $folder_wow
fi

# Delete & git clone classic-db folder done
fi

# Delete and start over done

# Create databases >

# Database 'characters'

 echo
RESULT=`mysql --defaults-extra-file="$sql_mycnf" -e "SHOW DATABASES" | grep $db_characters`
if [ "$RESULT" == "$db_characters" ];
then
printf "[\e[1;32mok\033[0m] 'Characters' database installed."
 echo
else
printf "[\033[1;31mempty\033[0m] 'Characters' importing.."
 echo
mysql --defaults-extra-file="$sql_mycnf" -e "CREATE DATABASE $db_characters CHARACTER SET utf8 COLLATE utf8_general_ci";
mysql --defaults-extra-file="$sql_mycnf" --database=$db_characters < $folder_sql/base/characters.sql
fi

# Database 'mangos'

RESULT=`mysql --defaults-extra-file="$sql_mycnf" -e "SHOW DATABASES" | grep $db_mangos`
if [ "$RESULT" == "$db_mangos" ];
then
printf "[\e[1;32mok\033[0m] 'Mangos' database installed."
 echo
else
printf "[\033[1;31mempty\033[0m] 'Mangos' importing.."
 echo
mysql --defaults-extra-file="$sql_mycnf" -e "CREATE DATABASE $db_mangos CHARACTER SET utf8 COLLATE utf8_general_ci";
mysql --defaults-extra-file="$sql_mycnf" --database=$db_mangos < $folder_sql/base/mangos.sql
fi

# Database 'realmd'

RESULT=`mysql --defaults-extra-file="$sql_mycnf" -e "SHOW DATABASES" | grep $db_realmd`
if [ "$RESULT" == "$db_realmd" ];
then
printf "[\e[1;32mok\033[0m] 'Realmd' database installed."
 echo
else
printf "[\033[1;31mempty\033[0m] 'Realmd' importing.."
 echo
mysql --defaults-extra-file="$sql_mycnf" -e "CREATE DATABASE $db_realmd CHARACTER SET utf8 COLLATE utf8_general_ci";
mysql --defaults-extra-file="$sql_mycnf" --database=$db_realmd < $folder_sql/base/realmd.sql
fi
 echo

# Create databases done

# MaNGOS InstallFullDB script >

sudo chown -R $user:$group $folder_wow
cd $folder_db
./InstallFullDB.sh

# MaNGOS InstallFullDB done

# IMPORT BACKUP >

 echo
 echo "$folder_wow/backup/$db_characters-$NOW.sql <--"
 echo "$folder_wow/backup/$db_realmd-$NOW.sql <--"
 echo
 read -p "Import backup? (y/n) " -n 1 -r
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then
 echo -ne '(0%)\r'
 sleep 1
mysql --defaults-extra-file="$sql_mycnf" $db_characters < $folder_wow/backup/$db_characters-$NOW.sql;
 echo -ne '(50%)\r'
 sleep 1
mysql --defaults-extra-file="$sql_mycnf" $db_realmd < $folder_wow/backup/$db_realmd-$NOW.sql;
 echo -ne '(100%)\r'
 sleep 1
fi

# IMPORT BACKUP done

 read -p "Press Enter to continue" </dev/tty
fi

# Update Database done

 ;;

"u")

# Accounts >

 echo "User Accounts"
 echo
mysql --defaults-extra-file="$sql_mycnf" --execute="SELECT username, gmlevel, last_ip, DATE_FORMAT(last_login, '%Y-%m-%d') last_login, id FROM $db_realmd.account;"
 read -p "Press Enter to continue" </dev/tty

# Accounts done

 ;;

"t")

# Characters >

 echo "Characters"
 echo
mysql --defaults-extra-file="$sql_mycnf" --execute="SELECT name, level, online, account FROM $db_characters.characters;"
 read -p "Press Enter to continue" </dev/tty

# Characters done

  ;;

"g")

# Guilds >

 echo "Guilds"
 echo
mysql --defaults-extra-file="$sql_mycnf" --execute="SELECT name, motd FROM $db_characters.guild;"
 read -p "Press Enter to continue" </dev/tty

# Guilds done

   ;;

"s")

# Shutdown server > (ﾉ °益°)ﾉ 彡 ┻━┻ holy hell .. need muh grindz x()<zz ! OO

 echo
 echo "Shutdown Server?"
 echo
 read -p "Are you sure? (y/n) " -n 1 -r
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then
printf "\033[1;31mShutting down server ..\033[0m"
 echo
 echo -ne '(0%)\r'
 sleep 1
sudo service realmd stop &> /dev/null
 echo -ne '(50%)\r'
 sleep 1
sudo service mangosd stop &> /dev/null
 echo -ne '(100%)\r'
 sleep 1
 echo
fi

# Shutdown server done

 ;;

"r")

# Restart server >

 echo
 echo "Restart Server?"
 echo
 read -p "Are you sure? (y/n) " -n 1 -r
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then
printf "\e[1;32mRestarting server ..\033[0m"
 echo
 echo -ne '(0%)\r'
 sleep 1
sudo service realmd restart &> /dev/null
 echo -ne '(50%)\r'
 sleep 1
sudo service mangosd restart &> /dev/null
 echo -ne '(100%)\r'
 sleep 1
 echo
 read -n 1 -p "Check server log? (world) (tail/follow/exit) " ans;
 echo
case $ans in
    t|T)
sudo tail $folder_core/run/logs/Server.log
 echo
 read -p "Press Enter to continue" </dev/tty
 ;;
    f|F)
sudo tail -f $folder_core/run/logs/Server.log
 ;;
    *)
 ;;
esac
fi

# Restart server done

 ;;

"w")

# Update Helper >

 echo
 echo "Update Helper?"
 echo
 read -p "Are you sure? (y/n) " -n 1 -r
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then
printf "\e[1;32mUpdating Helper\033[0m"
 echo
 echo -ne '(0%)\r'
 sleep 1
 echo "Moving older mangos -> /usr/local/bin/mangos.old .."
sudo mv /usr/local/bin/mangos /usr/local/bin/mangos.old
 echo -ne '(10%)\r'
 sleep 1
 echo "Stripping executable flag on mangos.old .."
sudo chmod -x /usr/local/bin/mangos.old
 echo -ne '(20%)\r'
 sleep 1
sudo chown -R $user:$group $folder_helper
 echo -ne '(30%)\r'
 sleep 1
cd $folder_helper
 echo -ne '(40%)\r'
 sleep 1
git pull
 echo -ne '(50%)\r'
 sleep 1
 echo "Installing new mangos .."
 echo -ne '(60%)\r'
 sleep 1
 echo -ne '(70%)\r'
 sleep 1
sudo cp mangos /usr/local/bin
 echo -ne '(80%)\r'
 sleep 1
sudo chmod +x /usr/local/bin/mangos
 echo -ne '(90%)\r'
 sleep 1
 echo
 echo "Restart mangos please.. will exit now."
 echo -ne '(100%)\r'
 sleep 1
exit
fi

# Update Helper done

 ;;

"l")

# Check logs >

mkdir $folder_core/run/logs &> /dev/null
 echo "Realmd log -->"
 echo
tail $folder_core/run/logs/Realmd.log
 echo
 read -n 1 -p "Check server log? (world) (tail/follow/exit) " ans;
 echo
case $ans in
    t|T)
tail $folder_core/run/logs/Server.log
 echo
 read -p "Press Enter to continue" </dev/tty
 ;;
    f|F)
tail -f $folder_core/run/logs/Server.log
 ;;
    *)
 ;;
esac

# Check logs done

  ;;

"p")

# Create .patch file >

 echo
 echo "Create patch?"
 echo
 read -p "Are you sure? (y/n) " -n 1 -r
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then
 echo "Creating patch file .."
 echo -ne '(0%)\r'
 sleep 1
sudo chown -R $user:$group $folder_wow
 echo -ne '(20%)\r'
 sleep 1
cd $folder_core
 echo -ne '(40%)\r'
 sleep 1
git checkout sql/create/db_create_mysql.sql 1> /dev/null
 echo -ne '(80%)\r'
 sleep 1
git diff > $patch
 sleep 1
 echo -ne '(100%)\r'
 sleep 1
 echo
fi

# Create .patch file done

 ;;

"o")

# Online check >

# Internet

 echo
printf "\e[1;32mOnline check\033[0m -> \e[1;32minternet\033[0m/\e[1;32mintranet\033[0m"
 echo
 echo "Checking .."
 echo
if nc -z $internet $realm_port 2>/dev/null; then
printf "\e[1;32m✓\033[0m $server_name - [ $internet ]"
ping -qc1 $internet 2>&1 | awk -F/ '/^rtt/ { printf " - OK %.2f ms\n", $5; ok = 1 } END { if (!ok) print " - FAIL" }'
else
printf "\033[1;31m✗\033[0m $server_name - [ $internet ]"
 echo
fi

# Intranet

if nc -z $intranet $realm_port 2>/dev/null; then
printf "\e[1;32m✓\033[0m $server_name_lan - [ $intranet ]"
ping -qc1 $intranet 2>&1 | awk -F/ '/^rtt/ { printf " - OK %.2f ms\n", $5; ok = 1 } END { if (!ok) print " - FAIL" }'
else
printf "\033[1;31m✗\033[0m $server_name_lan - [ $intranet ]"
 echo
fi
 echo
 read -p "Press Enter to continue" </dev/tty

# Online check done

  ;;

"Q")  exit                      ;;
"q")  echo "case sensitive!!"   ;;
 * )  echo "invalid option"     ;;
esac
 sleep 1
done

# Script done
