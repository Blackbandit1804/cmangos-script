#!/bin/bash

# Script >

############################################################################
#                      C M a N G O S  -  H E L P E R                       #
#               Continued Massive Network Game Object Server               #
############################################################################

# Built on a Ubuntu 19.10 - Linux 5.3.0-1014-raspi2 - (Raspberry Pi2/4)
# https://ubuntu.com/download/raspberry-pi

# C(ontinued)-MaNGOS (Classic fork)

# By Rainman
# V20202401
# 1.3.8.8

# Menusystem >

while :
do
clear

# Menusystem done

# Config directory >

# shellcheck disable=SC1091
source /scripts/server.txt # please edit if wrong.

# Config directory done

# Codes >

# Get database info
on_count=$(mysql --defaults-extra-file="$sql_mycnf" -N --execute="SELECT SUM(online) FROM $db_characters.characters;"); &> /dev/null
gu_count=$(mysql --defaults-extra-file="$sql_mycnf" -N --execute="SELECT count(*) FROM $db_characters.guild;"); &> /dev/null

# Get date
NOW="$(date +"%m.%d.%Y")"

# Get load
load="$(while IFS= read -r i; do echo "${i%?}"; done < /proc/loadavg 2> /dev/null | awk '{ print $1,$2,$3 }')"

# Set column width
COLUMNS=3
services=("mangosd" "realmd")

# Sort services
IFS=$'\n' services=($(sort <<<"${services[*]}"))
unset IFS
service_status=()

# Get status of all services
for service in "${services[@]}"; do
service_status+=($(systemctl is-active "$service"))
done >/dev/null 2>&1
out="     "
for i in "${!services[@]}"; do

# Color green if service is active, else red
if [[ "${service_status[$i]}" == "active" ]]; then
out+="${services[$i]}:,${color_green}${service_status[$i]}${color_no},"
else
out+="${services[$i]}:,${color_red}${service_status[$i]}${color_no},"
fi

# Insert \n every $COLUMNS column
if [ $((($i+1) % $COLUMNS)) -eq 0 ]; then
out+="\n"
fi
done
out+="\n"

# Codes done

# Menu >

printf "\e[31m ---------------------------------------------
    _____ _____     _____ _____ _____ _____
   |     |     |___|   | |   __|     |   __|
   |   --| | | | .'| | | |  |  |  |  |__   |
   |_____|_|_|_|__,|_|___|_____|_____|_____|\n\e[0m"
cat<<EOF
           C(ontinued)-MaNGOS Helper
             --------------------
EOF
 echo "               Online Players $on_count"
 echo "                   Guilds $gu_count"
 echo
cat<<EOF
                $load

EOF

# Service status >

printf "$out" | column -ts $',' | sed -e 's/^/  /'

# Service status done

cat<<EOF

       Start with checking for updates c)

   A : login (command)    p : patch
   a : create account     c : updates
   t : characters         r : restart
   u : accounts           s : shutdown
   g : guilds             m : update core
   e : config             d : update database
   o : ping               w : update Helper
   l : logs               Q : quit

EOF
 read -r -n1 -s
 case "$REPLY" in

# Menu done

"a")

# Create account ? > By Rainman

 echo
 read -r -p "Create Account? (y/n) " -n 1 -r
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then
 echo
 echo "Username:";
 read -r USR;
if [[ -z "$USR" ]]; then
printf '%s\n' "No input entered"
exit 1
else
printf "[\e[1;32mok\033[0m] $USR"
 echo
 echo
fi
 echo "Password"
 read -r -s PWD;
if [[ -z "$PWD" ]]; then
printf '%s\n' "No input entered"
exit 1
else
printf "[\e[1;32mok\033[0m] Password"
 echo
 echo
fi
 echo "Choose expansion-version - 0";
 read -r -s XPV;
if [[ -z "$XPV" ]]; then
printf '%s\n' "No input entered"
exit 1
else
printf "[\e[1;32mok\033[0m] expansion-version ($XPV)"
 echo
 echo
fi
 echo "GMLevel - 0-3";
 read -r -s LVL;
if [[ -z "$LVL" ]]; then
printf '%s\n' "No input entered"
exit 1
else
printf "[\e[1;32mok\033[0m] GMLevel ($LVL)"
 echo
fi
 echo "$user_nc
$pass_nc
.account create $USR $PWD
.account set addon $USR $XPV
.account set gmlevel $USR $LVL" > "$folder_wow"/tmp.txt
nc -q 1 "$host_nc" "$port_nc" < "$folder_wow"/tmp.txt ; rm "$folder_wow"/tmp.txt
 echo
printf "[\e[1;32mok\033[0m] Account $USR ($XPV/$LVL) created."
 echo
 echo
 sleep 2
fi

# Create account done

 ;;

"A")

# Login (command) > * fuck blizzard, activision and china.

# codes >

# Get database info
ac_count=$(mysql --defaults-extra-file="$sql_mycnf" -N --execute="SELECT count(*) FROM $db_realmd.account;"); &> /dev/null
bn_count=$(mysql --defaults-extra-file="$sql_mycnf" -N --execute="SELECT count(*) FROM $db_realmd.account_banned;"); &> /dev/null
# on_count &
# gu_count at TOP ^
me_count=$(mysql --defaults-extra-file="$sql_mycnf" -N --execute="SELECT count(*) FROM $db_characters.guild_member;"); &> /dev/null

ma_count=$(mysql --defaults-extra-file="$sql_mycnf" -N --execute="SELECT count(*) FROM $db_characters.mail;"); &> /dev/null
pe_count=$(mysql --defaults-extra-file="$sql_mycnf" -N --execute="SELECT count(*) FROM $db_characters.character_pet;"); &> /dev/null
ti_count=$(mysql --defaults-extra-file="$sql_mycnf" -N --execute="SELECT count(*) FROM $db_characters.character_ticket;"); &> /dev/null
co_count=$(mysql --defaults-extra-file="$sql_mycnf" -N --execute="SELECT count(*) FROM $db_characters.corpse;"); &> /dev/null
ch_count=$(mysql --defaults-extra-file="$sql_mycnf" -N --execute="SELECT count(*) FROM $db_characters.characters;"); &> /dev/null

pv_count=$(mysql --defaults-extra-file="$sql_mycnf" -N --execute="SELECT count(*) FROM $db_characters.pvpstats_players;"); &> /dev/null
gi_count=$(mysql --defaults-extra-file="$sql_mycnf" -N --execute="SELECT count(*) FROM $db_characters.character_gifts;"); &> /dev/null

# Walter A code >
# Thank you Walter A ! -> https://stackoverflow.com/questions/59862020

# todo Change implementation when field can be 2 words with a space in between
dot_field() {
printf "%-14.14s:" "$1" | tr ' ' '.'
}

# todo Change implementation when field can be 2 words with a space in between
space_number() {
printf "%-7.7s" "$1"
}

# todo: add logic when only 4 parameters are given
printline() {
 echo "       $(dot_field "$1") $(space_number "$2")$(dot_field "$3") $(space_number "$4")$(dot_field "$5") $(space_number "$6")"
}

# Fill out command center

cm_uptime="\033[0mTime""$W""$(uptime)\033[0m"
cm_realm="\033[0mRealm \e[0;32m$server_name\e[31m"

# codes done

clear

# Rainman text >

printf "
<----------------------------------------------------------------------------->\e[31m
                   \e[0;32mCMaNGOS (Classic fork) - Command Center\e[31m
           \e[0;33m[ C(ontinued)-MaNGOS Helper, admin helper tool v1.3.8.8 ]\e[31m

     \033[0m* Administrator functions and features for WoW Vanilla server.
     * Built on a Ubuntu 19.10 Server - (Raspberry Pi2/4)
     * \e[0;35mInternet:\033[0m 'set realmlist \e[0;35m$internet\033[0m'
     * \e[0;35mLanparty:\033[0m 'set realmlist \e[0;35m$intranet\033[0m' - When internet drop out.
     * $cm_uptime
     * Free Hong Kong.\033[0m

       $cm_realm\033[0m"
 echo
 echo

# Rainman text done

printline "Accounts" "$ac_count" "Guilds" "$gu_count" "Tickets" "$ti_count"
printline "Banned" "$bn_count" "Members" "$me_count" "Corpses" "$co_count"
printline "Online" "$on_count" "Mail" "$ma_count" "PvP" "$pv_count"
printline "Characters" "$ch_count" "Pets" "$pe_count" "Gifts" "$gi_count"

# Walter A code done

printf "
     \e[0;33mFor more information:\033[0m \e[0;35mhttps://github.com/Daedalus-code/cmangos-script\033[0m
<----------------------------------------------------------------------------->\033[0m"
 echo
 echo
 read -r -p " Want to login? (y/n) " -n 1 -r
 echo
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then
 echo "'quit' and then hit Enter two times to exit."
 echo
nc "$host_nc" "$port_nc"
 echo
fi

# Login (command) done * Free Hong Kong.

 ;;

"c")

# Checking for updates >

# CMaNGOS Core (mangos-classic)

printf "[ Checking for \e[1;32m+\033[1;31m-\033[0m Updates\033[0m ] .. "
 echo

 echo
cd "$folder_core" || exit
if git checkout master &> /dev/null &&
git fetch origin master &> /dev/null &&
[ "$(git rev-list HEAD...origin/master --count)" != 0 ] &&
git merge origin/master
then
printf "[\033[1;31mold\033[0m] Core Not Updated - "
 git rev-parse --short HEAD
else
printf "[\e[1;32mok\033[0m] Core Updated - "
 git rev-parse --short HEAD
fi

# Classic Database (classic-db)

cd "$folder_db" || exit
if git checkout master &> /dev/null &&
git fetch origin master &> /dev/null &&
[ "$(git rev-list HEAD...origin/master --count)" != 0 ] &&
git merge origin/master
then
printf "[\033[1;31mold\033[0m] Database Not Updated - "
 git rev-parse --short HEAD
else
printf "[\e[1;32mok\033[0m] Database Updated - "
 git rev-parse --short HEAD
fi

# CMaNGOS Helper

cd "$folder_helper" || exit
if git checkout master &> /dev/null &&
git fetch origin master &> /dev/null &&
[ "$(git rev-list HEAD...origin/master --count)" != 0 ] &&
git merge origin/master
then
printf "[\033[1;31mold\033[0m] Helper Not Updated - "
 git rev-parse --short HEAD
else
printf "[\e[1;32mok\033[0m] Helper Updated - "
 git rev-parse --short HEAD
fi
 echo
 read -r -p "Press Enter to continue" </dev/tty
 echo

# Checking for updates done

 ;;

"m")

# Update CMaNGOS ? >

 echo
printf "Update classic-mangos [\e[1;32mcore\033[0m] ?"
 echo
 echo
 read -r -p "Are you sure? (y/n) " -n 1 -r
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then
 echo "Shutting down Services.."
 echo -ne '(0%)\r'
 sleep 1
sudo service realmd stop &> /dev/null
 echo -ne '(50%)\r'
 sleep 1
sudo service mangosd stop &> /dev/null
 echo -ne '(100%)\r'
 sleep 1
printf "Updating mangos-classic (\e[1;32mcore\033[0m).."
 echo
 read -r -p "Install Software requirements? (y/n) " -n 1 -r
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then
packagelist=(
checkinstall
build-essential
gcc
g++
automake
git-core
autoconf
make
patch
libmysql++-dev
mysql-server
libtool
libssl-dev
grep
binutils
zlibc
libc6
libbz2-dev
cmake
subversion
libboost-all-dev
)
sudo apt-get install "${packagelist[@]}" -y 1> /dev/null
fi

# reset --hard origin/master ? >

 read -r -p "Reset --hard origin/master? (y/n) " -n 1 -r
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then
cd "$folder_core" || exit
git reset --hard origin/master
fi

# reset --hard origin/master done

# Build from scratch ? >

 read -r -p "Fresh install? (delete /build) (y/n) " -n 1 -r
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then
cd || exit
sudo mkdir wow &> /dev/null
sudo chown -R "$user":"$group" "$folder_wow"
sudo rm -r "$folder_core"/build/ &> /dev/null
cd "$folder_wow" || exit
git clone https://github.com/cmangos/mangos-classic.git 2> /dev/null
sudo mkdir "$folder_core"/build &> /dev/null
fi

# Build from scratch done

sudo chown -R "$user":"$group" "$folder_wow"
cd "$folder_build" || exit
cmake .. $cmake
cd "$folder_build" || exit
make
 echo
printf "Select install operation"
 echo
 echo " 1) make install"
 echo " 2) checkinstall with backup"
 echo
 read -r n
case $n in
 1) echo "make install"
cd "$folder_build" || exit
sudo make install
 ;;
 2) echo "checkinstall"
cd "$folder_build" || exit
sudo checkinstall
 ;;
 *) echo "invalid option"
 ;;
esac
 echo

# Edit/Copy config files ? >

 read -r -p "Edit config files? (nano) (y/n) " -n 1 -r
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then

 read -r -p "Copy 'ahbot.conf.dist.in' into run/etc ? (y/n) " -n 1 -r
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then
cp "$folder_core"/src/game/AuctionHouseBot/ahbot.conf.dist.in "$folder_core"/run/etc/ahbot.conf.dist &> /dev/null
 echo "run/etc/ahbot.conf.dist created."
fi

title="       Save config without .dist
    ================================
          Server configuration
"
 echo
prompt="

Choose number ->

>"
 echo
options=(

 "mangos.conf.dist"

 "realmd.conf.dist"

 "playerbot.conf.dist"

 "ahbot.conf.dist"

 "mangos.conf"

 "realmd.conf"

 "playerbot.conf"

 "ahbot.conf"

 )

 echo "$title"
PS3="$prompt "
select opt in "${options[@]}" "Quit"; do

case "$REPLY" in

 1 ) echo "You picked $opt $REPLY"
nano "$folder_core"/run/etc/mangosd.conf.dist;;
 2 ) echo "You picked $opt $REPLY"
nano "$folder_core"/run/etc/realmd.conf.dist;;
 3 ) echo "You picked $opt $REPLY"
nano "$folder_core"/run/etc/playerbot.conf.dist;;
 4 ) echo "You picked $opt $REPLY"
nano "$folder_core"/run/etc/ahbot.conf.dist;;

 5 ) echo "You picked $opt $REPLY"
nano "$folder_core"/run/etc/mangosd.conf;;
 6 ) echo "You picked $opt $REPLY"
nano "$folder_core"/run/etc/realmd.conf;;
 7 ) echo "You picked $opt $REPLY"
nano "$folder_core"/run/etc/playerbot.conf;;
 8 ) echo "You picked $opt $REPLY"
nano "$folder_core"/run/etc/ahbot.conf;;

$(( ${#options[@]}+1 )) ) echo "
See you next time!
"; break;;
 *) echo "Invalid option. Try another one.";continue;;
esac
done
fi

# Edit/Copy config files done

 read -r -p "Press Enter to continue" </dev/tty
fi

# Update CMaNGOS done

 ;;

"d")

# Update Database ? >

 echo
printf "Update classic-db [\e[1;32mdatabase\033[0m] ?"
 echo
 echo
 read -r -p "Are you sure? (y/n) " -n 1 -r
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then
 echo "Shutting down Services.."
 echo -ne '(0%)\r'
 sleep 1
sudo service realmd stop &> /dev/null
 echo -ne '(50%)\r'
 sleep 1
sudo service mangosd stop &> /dev/null
sudo chown -R "$user":"$group" "$folder_wow"

# BACKUP (regardless) >

mkdir "$folder_wow"/backup &> /dev/null
mkdir "$folder_wow"/backup/old &> /dev/null
cp "$folder_wow"/backup/*.sql "$folder_wow"/backup/old &> /dev/null
sudo apt-get install zip -y &> /dev/null
cd "$folder_wow"/backup/old/ || exit ; zip "$server_name.zip" "$folder_wow"/backup/*.sql &> /dev/null
find "$folder_wow"/backup/*.sql -type d -ctime +10 -exec rm -rf {} \; &> /dev/null
find "$folder_wow"/backup/old/*.sql -type d -ctime +10 -exec rm -rf {} \; &> /dev/null
 echo -ne '(100%)\r'
 sleep 1
 echo

# Backup <- characters.sql

 echo
FILE="$folder_wow/backup/$db_characters-$NOW.sql"
if [ ! -f "$FILE" ];
then
printf "[\e[0;31mempty\033[0m/\e[0;31mold\033[0m] 'Characters' ! Creating backup.."
mysqldump --defaults-extra-file="$sql_mycnf" --column-statistics=0 "$db_characters" > "$folder_wow"/backup/"$db_characters"-"$NOW".sql
 echo
else
printf "[\e[1;32mok\033[0m] 'Characters' backup existing."
 echo
fi

# Backup <- realmd.sql

FILE="$folder_wow/backup/$db_realmd-$NOW.sql"
if [ ! -f "$FILE" ];
then
printf "[\e[0;31mempty\033[0m/\e[0;31mold\033[0m] 'Realmd' ! Creating backup.."
mysqldump --defaults-extra-file="$sql_mycnf" --column-statistics=0 "$db_realmd" > "$folder_wow"/backup/"$db_realmd"-"$NOW".sql
 echo
else
printf "[\e[1;32mok\033[0m] 'Realmd' backup existing."
 echo
fi

# BACKUP done

 echo
printf "Updating classic-db [\e[1;32mdatabase\033[0m]"
 echo
packagelist=(
mysql-server
mysql-client
)
sudo apt-get install "${packagelist[@]}" -y 1> /dev/null

# Delete and start over ? >

 read -r -p "Fresh install? (drop/import databases) (y/n) " -n 1 -r
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then

# Setting Up the Database

# Backup <- characters.sql

 echo
FILE="$folder_wow/backup/$db_characters-$NOW.sql"
if [ ! -f "$FILE" ];
then
printf "[\e[0;31mmempty\033[0m/\e[0;31mold\033[0m] 'Characters' ! Creating backup.."
mysqldump --defaults-extra-file="$sql_mycnf" --column-statistics=0 "$db_characters" > "$folder_wow"/backup/"$db_characters"-"$NOW".sql
 echo
else
printf "[\e[1;32mok\033[0m] 'Characters' backup existing."
 echo
fi

# Backup <- realmd.sql

FILE="$folder_wow/backup/$db_realmd-$NOW.sql"
if [ ! -f "$FILE" ];
then
printf "[\e[0;31mmempty\033[0m/\e[0;31mold\033[0m] 'Realmd' ! Creating backup.."
mysqldump --defaults-extra-file="$sql_mycnf" --column-statistics=0 "$db_realmd" > "$folder_wow"/backup/"$db_realmd"-"$NOW".sql
 echo
else
printf "[\e[1;32mok\033[0m] 'Realmd' backup existing"
 echo
fi

# BACKUP done

# DROP Databases >

# DROP Database 'characters'

 echo
RESULT=$(mysql --defaults-extra-file="$sql_mycnf" -e "SHOW DATABASES" | grep "$db_characters")
if [ "$RESULT" == "$db_characters" ]; then
mysqladmin --defaults-extra-file="$sql_mycnf" -f DROP "$db_characters";
fi

# DROP Database 'mangos'

RESULT=$(mysql --defaults-extra-file="$sql_mycnf" -e "SHOW DATABASES" | grep "$db_mangos")
if [ "$RESULT" == "$db_mangos" ]; then
mysqladmin --defaults-extra-file="$sql_mycnf" -f DROP "$db_mangos";
fi

# DROP Database 'realmd'

RESULT=$(mysql --defaults-extra-file="$sql_mycnf" -e "SHOW DATABASES" | grep "$db_realmd")
if [ "$RESULT" == "$db_realmd" ]; then
mysqladmin --defaults-extra-file="$sql_mycnf" -f DROP "$db_realmd";
fi

# DROP Databases done

# Delete & git clone classic-db folder ? >

 echo
 read -r -p "Fresh install? (delete/git clone classic-db) (y/n) " -n 1 -r
 echo

if [[ $REPLY =~ ^[Yy]$ ]]
then

sudo chown -R "$user":"$group" "$folder_wow"
cp "$folder_db"/InstallFullDB.config "$folder_wow" &> /dev/null
sudo rm -r "$folder_db" &> /dev/null
cd "$folder_wow" || exit
git clone https://github.com/cmangos/classic-db.git
mv "$folder_wow"/*.config "$folder_db" &> /dev/null
sudo chown -R "$user":"$group" "$folder_wow"
fi

# Delete & git clone classic-db folder done
fi

# CREATE Databases >

# CREATE Database 'characters'

 echo
RESULT=$(mysql --defaults-extra-file="$sql_mycnf" -e "SHOW DATABASES" | grep "$db_characters")
if [ "$RESULT" == "$db_characters" ];
then
printf "[\e[1;32mok\033[0m] 'Characters' database installed."
 echo
else
printf "[\033[1;31mempty\033[0m] 'Characters' importing.."
 echo
mysql --defaults-extra-file="$sql_mycnf" -e "CREATE DATABASE $db_characters CHARACTER SET utf8 COLLATE utf8_general_ci";
mysql --defaults-extra-file="$sql_mycnf" --database="$db_characters" < "$folder_sql"/base/characters.sql
fi

# CREATE Database 'mangos'

RESULT=$(mysql --defaults-extra-file="$sql_mycnf" -e "SHOW DATABASES" | grep "$db_mangos")
if [ "$RESULT" == "$db_mangos" ];
then
printf "[\e[1;32mok\033[0m] 'Mangos' database installed."
 echo
else
printf "[\033[1;31mempty\033[0m] 'Mangos' importing.."
 echo
mysql --defaults-extra-file="$sql_mycnf" -e "CREATE DATABASE $db_mangos CHARACTER SET utf8 COLLATE utf8_general_ci";
mysql --defaults-extra-file="$sql_mycnf" --database="$db_mangos" < "$folder_sql"/base/mangos.sql
fi

# CREATE Database 'realmd'

RESULT=$(mysql --defaults-extra-file="$sql_mycnf" -e "SHOW DATABASES" | grep "$db_realmd")
if [ "$RESULT" == "$db_realmd" ];
then
printf "[\e[1;32mok\033[0m] 'Realmd' database installed."
 echo
else
printf "[\033[1;31mempty\033[0m] 'Realmd' importing.."
 echo
mysql --defaults-extra-file="$sql_mycnf" -e "CREATE DATABASE $db_realmd CHARACTER SET utf8 COLLATE utf8_general_ci";
mysql --defaults-extra-file="$sql_mycnf" --database="$db_realmd" < "$folder_sql"/base/realmd.sql
fi
 echo

# CREATE Databases done

# Delete and start over done

# MaNGOS InstallFullDB ? >

 read -r -p "MaNGOS InstallFullDB? (y/n) " -n 1 -r
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then
sudo chown -R "$user":"$group" "$folder_wow"
cd "$folder_db" || exit
./InstallFullDB.sh
fi

# MaNGOS InstallFullDB done

# IMPORT BACKUP ? >

 echo
ls -lQ "$folder_wow"/backup
 echo
 read -r -p "Import latest backup? (y/n) " -n 1 -r
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then
 echo -ne '(0%)\r'
 sleep 1
mysql --defaults-extra-file="$sql_mycnf" "$db_characters" < "$folder_wow"/backup/"$db_characters"-"$NOW".sql;
 echo -ne '(50%)\r'
 sleep 1
mysql --defaults-extra-file="$sql_mycnf" "$db_realmd" < "$folder_wow"/backup/"$db_realmd"-"$NOW".sql;
 echo -ne '(100%)\r'
 sleep 1
fi

# IMPORT BACKUP done

# convert_mysql_engine = myisam -> innodb ? >

 read -r -p "Converting? (myisam -> innodb) Works on MariaDB (y/n) " -n 1 -r
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then
 echo -ne '(0%)\r'
 sleep 1
TABLES=$(sudo mysql --defaults-extra-file="$sql_mycnf" --skip-column-names -B -D "$db_mangos" -e 'show tables')
for T in $TABLES
do
sudo mysql --defaults-extra-file="$sql_mycnf" -D "$db_mangos" -e "ALTER TABLE $T Engine=InnoDB ROW_FORMAT=DYNAMIC"
done
 echo -ne '(25%)\r'
 sleep 1
TABLES=$(sudo mysql --defaults-extra-file="$sql_mycnf" --skip-column-names -B -D "$db_realmd" -e 'show tables')
for T in $TABLES
do
sudo mysql --defaults-extra-file="$sql_mycnf" -D "$db_realmd" -e "ALTER TABLE $T Engine=InnoDB ROW_FORMAT=DYNAMIC"
done
 echo -ne '(50%)\r'
 sleep 1
TABLES=$(sudo mysql --defaults-extra-file="$sql_mycnf" --skip-column-names -B -D "$db_characters" -e 'show tables')
for T in $TABLES
do
sudo mysql --defaults-extra-file="$sql_mycnf" -D "$db_characters" -e "ALTER TABLE $T Engine=InnoDB ROW_FORMAT=DYNAMIC"
done
 echo -ne '100%)\r'
 sleep 1
fi

# convert_mysql_engine = myisam -> innodb done

 read -r -p "Press Enter to continue" </dev/tty
fi

# Update Database done

 ;;

"u")

# Accounts >

 echo "User Accounts"
 echo
mysql --defaults-extra-file="$sql_mycnf" --execute="SELECT username, gmlevel, last_ip, DATE_FORMAT(last_login, '%Y-%m-%d') last_login, id FROM $db_realmd.account;"
 read -r -p "Press Enter to continue" </dev/tty

# Accounts done

 ;;

"t")

# Characters >

 echo "Characters"
 echo
mysql --defaults-extra-file="$sql_mycnf" --execute="SELECT name, level, online, account FROM $db_characters.characters;"
 read -r -p "Press Enter to continue" </dev/tty

# Characters done

  ;;

"g")

# Guilds >

 echo "Guilds"
 echo
mysql --defaults-extra-file="$sql_mycnf" --execute="SELECT name, motd FROM $db_characters.guild;"
 read -r -p "Press Enter to continue" </dev/tty

# Guilds done

   ;;

"s")

# Shutdown server ? >> (ﾉ °益°)ﾉ 彡 ┻━┻ holy *@?!1kek .. need muh grindz x()<zz ! OO

 echo
 echo "Shutdown Server?"
 echo
 read -r -p "Are you sure? (y/n) " -n 1 -r
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then
printf "\033[1;31mShutting down server..\033[0m"
 echo
 echo -ne '(0%)\r'
 sleep 1
sudo service realmd stop &> /dev/null
 echo -ne '(50%)\r'
 sleep 1
sudo service mangosd stop &> /dev/null
 echo -ne '(100%)\r'
 sleep 1
fi

# Shutdown server done << it's over!!

 ;;

"r")

# Restart server ? >

 echo
 echo "Restart Server?"
 echo
 read -r -p "Are you sure? (y/n) " -n 1 -r
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then
printf "\e[1;32mRestarting server..\033[0m"
 echo
 echo -ne '(0%)\r'
 sleep 1
sudo service realmd restart &> /dev/null
 echo -ne '(50%)\r'
 sleep 1
sudo service mangosd restart &> /dev/null
 echo -ne '(100%)\r'
res1=$(date +%s.%N)
 sleep 1
printf "\e[1;32m<------------------------------------------------------>\033[0m"
 echo
if grep -q ".*ERROR.*\n" "$folder_core"/run/logs/Realmd.log; then
printf "Realmd.log "
printf "[\033[1;31mError\033[0m] > "
grep -E ".*ERROR.*\n" "$folder_core"/run/logs/Realmd.log | wc -l
else
printf "Realmd.log "
printf "[\e[1;32mok\033[0m]"
 echo
fi
 echo
tail "$folder_core"/run/logs/Realmd.log
printf "\e[1;32m<------------------------------------------------------>\033[0m"
 echo
 echo
 read -r -p "Wait on startup? (y/n) " -n 1 -r
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then
# wait for mangosd to fill up Server.log >
tail -f "$folder_core"/run/logs/Server.log | while read LOGLINE
do
[[ "${LOGLINE}" == *"STARTUP"* ]] && pkill -P $$ tail
done
# wait for mangosd to fill up Server.log done
res2=$(date +%s.%N)
# codes >

dt=$(echo "$res2 - $res1" | bc)
dd=$(echo "$dt/86400" | bc)
dt2=$(echo "$dt-86400*$dd" | bc)
dh=$(echo "$dt2/3600" | bc)
dt3=$(echo "$dt2-3600*$dh" | bc)
dm=$(echo "$dt3/60" | bc)
ds=$(echo "$dt3-60*$dm" | bc)

# codes done
printf "[\e[1;32mok\033[0m] "
printf "Total runtime: %d:%02d:%02d:%02.4f\n" "$dd" "$dh" "$dm" "$ds"
fi
 read -r -p "Press Enter to continue" </dev/tty
 echo
if grep -q ".*ERROR.*\n" "$folder_core"/run/logs/Server.log; then
printf "Server.log "
printf "[\033[1;31mError\033[0m] > "
grep -E ".*ERROR.*\n" "$folder_core"/run/logs/Server.log | wc -l
else
printf "Server.log "
printf "[\e[1;32mok\033[0m]"
 echo
fi
if grep -q "malformed" "$folder_core"/run/logs/Server.log; then
printf "[\033[1;31mSerious\033[0m] > "
grep -E "malformed" "$folder_core"/run/logs/Server.log | wc -l
fi
 echo
 read -r -n 1 -p "Check server log? (world) (tail/follow/nano/exit) " ans;
 echo
 echo
case $ans in
 t|T)
tail "$folder_core"/run/logs/Server.log
 echo
printf "\e[1;32m<------------------------------------------------------>\033[0m"
 echo
 read -r -p "Press Enter to continue" </dev/tty
 ;;
 f|F)
tail -f "$folder_core"/run/logs/Server.log
 ;;
 n|N)
 echo
nano "$folder_core"/run/logs/Server.log
 ;;
 *)
 ;;
esac
fi

# Restart server done

 ;;

"w")

# Update Helper ? >

printf "Update cmangos-script [\e[1;32mHelper\033[0m] ?"
 echo
 echo
 read -r -p "Are you sure? (y/n) " -n 1 -r
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then

# reset --hard origin/master ? >

 read -r -p "Reset --hard origin/master? (y/n) " -n 1 -r
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then
cd "$folder_helper" || exit
git reset --hard origin/master
fi

# reset --hard origin/master done

 read -r -p "Fresh install? (delete/git clone /scripts/>) (y/n) " -n 1 -r
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then
sudo rm /usr/local/bin/mangos &> /dev/null
printf "[\e[1;32mok\033[0m] -> installed mangos removed."
 echo
sudo rm -r "$folder_helper"
printf "[\e[1;32mok\033[0m] -> cmangos-script removed."
 echo
sudo mkdir /scripts/ &> /dev/null
printf "[\e[1;32mok\033[0m] -> /scripts/> git clone.."
 echo
cd /scripts && git clone https://github.com/Daedalus-code/cmangos-script.git
sudo cp /scripts/cmangos-scripts/mangos /usr/local/bin &> /dev/null
printf "[\e[1;32mok\033[0m] -> Installing new release"
 echo
 sleep 1
printf "[\e[1;32mok\033[0m] -> Installed."
fi
 echo
 echo "Checking your current release"
 echo
 sleep 1
cd "$folder_helper" || exit
if git checkout master &> /dev/null &&
git fetch origin master &> /dev/null &&
[ "$(git rev-list HEAD...origin/master --count)" != 0 ] &&
git merge origin/master
then
cd "$folder_helper" || exit
 echo
 sleep 1
printf "[\033[1;31mold\033[0m] -> old release installed!"
 sleep 1
 echo
 echo
printf "[\e[1;32mUpdating Helper\033[0m]"
 echo
 echo
 sudo cp /usr/local/bin/mangos /usr/local/bin/mangos.old &> /dev/null
printf "[\e[1;32mok\033[0m] -> /usr/local/bin/mangos.old"
 sleep 1
 echo
printf "[\e[1;32mok\033[0m] -> Stripping executable on 'mangos.old'"
 sleep 1
 echo
sudo chmod -x /usr/local/bin/mangos.old
sudo chown -R "$user":"$group" "$folder_helper"
cd "$folder_helper" || exit
printf "[\e[1;32mok\033[0m] -> Installing new release"
 sleep 1
 echo
sudo cp mangos /usr/local/bin
sudo chmod +x /usr/local/bin/mangos
 sleep 1
printf "[\e[1;32mok\033[0m] -> Installed."
 echo
 echo
 echo "Will exit now."
 sleep 2 && exit
else
cd "$folder_helper" || exit
printf "[\e[1;32mok\033[0m] Helper - latest release - "
git rev-parse --short HEAD
 sleep 1
 echo
 read -r -p "Install regardless? (y/n) " -n 1 -r
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then
 echo
printf "[\e[1;32mUpdating Helper\033[0m]"
 sleep 1
 echo
 echo
printf "[\e[1;32mok\033[0m] -> /usr/local/bin/mangos.old"
 sleep 1
 echo
sudo cp /usr/local/bin/mangos /usr/local/bin/mangos.old &> /dev/null
printf "[\e[1;32mok\033[0m] -> Stripping executable on 'mangos.old'"
 sleep 1
 echo
sudo chmod -x /usr/local/bin/mangos.old
sudo chown -R "$user":"$group" "$folder_helper"
cd "$folder_helper" || exit
printf "[\e[1;32mok\033[0m] -> Installing latest release"
 sleep 1
 echo
sudo cp mangos /usr/local/bin
sudo chmod +x /usr/local/bin/mangos
printf "[\e[1;32mok\033[0m] -> Installed."
 echo
 echo
 echo "Will exit now."
 sleep 2 && exit
fi
fi
fi

# Update Helper done

 ;;

"l")

# Check logs >

mkdir "$folder_core"/run/logs &> /dev/null
printf "\e[1;32m<------------------------------------------------------>\033[0m"
 echo
if grep -q ".*ERROR.*\n" "$folder_core"/run/logs/Realmd.log; then
printf "Realmd.log "
printf "[\033[1;31mError\033[0m] > "
grep -E ".*ERROR.*\n" "$folder_core"/run/logs/Realmd.log | wc -l
else
printf "Realmd.log "
printf "[\e[1;32mok\033[0m]"
 echo
fi
 echo
tail "$folder_core"/run/logs/Realmd.log
printf "\e[1;32m<------------------------------------------------------>\033[0m"
 echo
if grep -q ".*ERROR.*\n" "$folder_core"/run/logs/Server.log; then
printf "Server.log "
printf "[\033[1;31mError\033[0m] > "
grep -E ".*ERROR.*\n" "$folder_core"/run/logs/Server.log | wc -l
else
printf "Server.log "
printf "[\e[1;32mok\033[0m]"
 echo
fi
if grep -q "malformed" "$folder_core"/run/logs/Server.log; then
printf "[\033[1;31mSerious\033[0m] > "
grep -E "malformed" "$folder_core"/run/logs/Server.log | wc -l
fi
 echo
 read -r -n 1 -p "Check server log? (world) (tail/follow/nano/exit) " ans;
 echo
 echo
case $ans in
 t|T)
tail "$folder_core"/run/logs/Server.log
 echo
printf "\e[1;32m<------------------------------------------------------>\033[0m"
 echo
 read -r -p "Press Enter to continue" </dev/tty
 ;;
 f|F)
 echo
tail -f "$folder_core"/run/logs/Server.log
 ;;
 n|N)
 echo
nano "$folder_core"/run/logs/Server.log
 ;;
 *)
 ;;
esac

# Check logs done

  ;;

"p")

# Create/Apply .patch file ? >

 read -r -p "Download ARM patch (Pi2)? (y/n) " -n 1 -r
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then
cd "$folder_core" || exit
wget https://raw.githubusercontent.com/Daedalus-code/cmangos-arm/master/arm_pi2.patch
fi

 read -r -p "Download ARM patch (Pi4)? (y/n) " -n 1 -r
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then
cd "$folder_core" || exit
wget https://raw.githubusercontent.com/Daedalus-code/cmangos-arm/master/arm_pi4.patch
fi

 read -r -p "Apply .patch file? (ARM) (y/n) " -n 1 -r
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then

printf "Select patch"
 echo
 echo " 1) ARM patch (Pi2)"
 echo " 2) ARM patch (Pi4)"
 echo
 read -r n
case $n in
 1) echo "Applying patch - (Pi2)"
sudo chown -R "$user":"$group" "$folder_core"
cd "$folder_core" || exit
patch < arm_pi2.patch -p1
 ;;
 2) echo "Applying patch - (Pi4)"
cd "$folder_core" || exit
patch < arm_pi4.patch -p1
 ;;
 *) echo "invalid option"
 ;;
esac
fi

 read -r -p "Create/Apply new patch file now? (y/n) " -n 1 -r
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then

printf "Select patch operation"
 echo
 echo
 echo " 1) Create patch"
 echo " 2) Apply patch"
 echo
 read -r n
case $n in
 1) echo "Create patch"
sudo chown -R "$user":"$group" "$folder_core"
cd "$folder_core" || exit
git checkout sql/create/db_create_mysql.sql 1> /dev/null
git diff > "$patch"
 ;;
 2) echo "Apply patch"
cd "$folder_core" || exit
patch < "$patch" -p1
 ;;
 *) echo "invalid option"
 ;;
esac
 echo
 read -r -p "Press Enter to continue" </dev/tty
 echo
fi

# Create/Apply .patch file done

 ;;

"o")

# Online check >

# Internet

 echo
printf "\e[1;32mOnline check\033[0m -> \e[1;32minternet\033[0m/\e[1;32mintranet\033[0m"
 echo
 echo "Checking.."
 echo
if nc -z "$internet" "$realm_port" 2>/dev/null; then
printf "\e[1;32m✓\033[0m $server_name - [ $internet ]"
ping -qc1 "$internet" 2>&1 | awk -F/ '/^rtt/ { printf " - OK %.2f ms\n", $5; ok = 1 } END { if (!ok) print " - FAIL" }'
else
printf "\033[1;31m✗\033[0m $server_name - [ $internet ]"
 echo
fi

# Intranet

if nc -z "$intranet" "$realm_port" 2>/dev/null; then
printf "\e[1;32m✓\033[0m $server_name_lan - [ $intranet ]"
ping -qc1 "$intranet" 2>&1 | awk -F/ '/^rtt/ { printf " - OK %.2f ms\n", $5; ok = 1 } END { if (!ok) print " - FAIL" }'
else
printf "\033[1;31m✗\033[0m $server_name_lan - [ $intranet ]"
 echo
fi
 echo
 read -r -p "Press Enter to continue" </dev/tty

# Online check done

  ;;

  "e")

# Edit/Copy config files ? >

 read -r -p "Edit config files? (nano) (y/n) " -n 1 -r
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then

 read -r -p "Copy 'ahbot.conf.dist.in' into run/etc ? (y/n) " -n 1 -r
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then
cp "$folder_core"/src/game/AuctionHouseBot/ahbot.conf.dist.in "$folder_core"/run/etc/ahbot.conf.dist &> /dev/null
 echo "run/etc/ahbot.conf.dist created."
fi

title="       Save config without .dist
    ================================
          Server configuration
"
 echo
prompt="

Choose number ->

>"
 echo
options=(

 "mangos.conf.dist"

 "realmd.conf.dist"

 "playerbot.conf.dist"

 "ahbot.conf.dist"

 "mangos.conf"

 "realmd.conf"

 "playerbot.conf"

 "ahbot.conf"

)

 echo "$title"
PS3="$prompt "
select opt in "${options[@]}" "Quit"; do

case "$REPLY" in

 1 ) echo "You picked $opt $REPLY"
nano "$folder_core"/run/etc/mangosd.conf.dist;;
 2 ) echo "You picked $opt $REPLY"
nano "$folder_core"/run/etc/realmd.conf.dist;;
 3 ) echo "You picked $opt $REPLY"
nano "$folder_core"/run/etc/playerbot.conf.dist;;
 4 ) echo "You picked $opt $REPLY"
nano "$folder_core"/run/etc/ahbot.conf.dist;;

 5 ) echo "You picked $opt $REPLY"
nano "$folder_core"/run/etc/mangosd.conf;;
 6 ) echo "You picked $opt $REPLY"
nano "$folder_core"/run/etc/realmd.conf;;
 7 ) echo "You picked $opt $REPLY"
nano "$folder_core"/run/etc/playerbot.conf;;
 8 ) echo "You picked $opt $REPLY"
nano "$folder_core"/run/etc/ahbot.conf;;

 $(( ${#options[@]}+1 )) ) echo "
 See you next time!
 "; break;;
 *) echo "Invalid option. Try another one.";continue;;
esac
done
fi

# Edit/Copy config files done

    ;;

"Q")  exit                      ;;
"q")  echo "case sensitive!!"   ;;
 * )  echo "invalid option"     ;;
esac
 sleep 1
done

# Script done
