#!/bin/bash

# Script >

############################################################################
#                      C M a N G O S  -  H E L P E R                       #
#               Continued Massive Network Game Object Server               #
############################################################################

# Build on a Ubuntu 19.10 - Linux 5.3.0-1014-raspi2 - (Raspberry Pi2/4)
# https://ubuntu.com/download/raspberry-pi

# C(ontinued)-MaNGOS (Classic fork)

# By Rainman
# V20201901
# 1.1.6.2

# Config directory >

source /scripts/server.txt # please edit if wrong.

# Config directory done

# >

printf "\e[31m
                                    ▄▄▄▄▄
                              ▄▄▄███░░░▒▒▒▓▓
                          ▄▄██░░░▒▒▒▓▓▓          WELCoME To THE \e[1mDARKSiDE\e[0;31m!!
                        ▄█░░▒▒▓▓
▄▄▄▄▄▄                ▄█░▒▓                     ▄▄▄▄▄▄▄                   ▄▄▄▄▄
▒▒▒▒▒▒████████▄▄▄▄   █░▒▓                    ▄██▀▀   ▀▀██▄    ▄▄▄▄████████▒▒▒▒▒
▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒█▀▄▄▄██████▄▄▄          ▄██▀          █▒▓ ██▒▒▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓
      ▓▓▓▓▓▓▓▓▓▓▓ ▄██▀▀      ▀▀▀███▄▄▄ ▄▄██▀      ██     ▓  ▒▒▓▓▓▓▓▓▓▓▓▓▓▓
                 ▓▐█    ▐█         ▀▀▀▄▀▀                ▓  ▓▓
                  ███▄     ▄▄▄▄▄▄▄▀██▀▄▀█░▀█▄▄▄▄▄▄     ▄░▒▓
                 ▐█████████░░▒▒▓▓ ▐▌ ▄█▄ ▐░▒▓████████████░▒▓
                 ▐████░░▒▒▓▓  ▄▄████░▒ ██░▒▓   ▀▀▀███████░▒▓
  \e[1;35mToDAY iS\e[0;31m        █░▒▓▓     ▄███████░▒ ██░░▒▒▓  ▓    ▀▀█░▒▓
     \e[35m$NOW\e[31m    ▀   ▓▓ ▄████████░▒  ▀ █░░▒▒▓    ▓▓▓
                         ▄██▀▀▀▄▄▄ ▐▀▀ █▀▄ ▄▄▄   ▓  ▓
                         ▄▄ █▀ ▐▒   ▀  ▐   ▀▒  █▀ ▄▄
                         ▐▒     ▀           ▀     ▐▒
                          ▀                       ▀\n\e[0m"
printf "

 Explosions! MORE explosions! I got to have more explosions!

 — Sicco Thermaplugg



"

# Easter egg done

# Menu >

while :
do
clear
printf "\e[31m ---------------------------------------------
    _____ _____     _____ _____ _____ _____
   |     |     |___|   | |   __|     |   __|
   |   --| | | | .'| | | |  |  |  |  |__   |
   |_____|_|_|_|__,|_|___|_____|_____|_____|\n\e[0m"
cat<<EOF
           C(ontinued)-MaNGOS Helper
             --------------------
EOF
id=$(mysql --defaults-extra-file="$sql_mycnf" -N --execute="SELECT SUM(online) FROM $db_characters.characters;"); &> /dev/null
 echo "               Online Players $id"
guilds=$(mysql --defaults-extra-file="$sql_mycnf" -N --execute="SELECT count(*) FROM $db_characters.guild;"); &> /dev/null
 echo "                   Guilds $guilds"
 echo
cat<<EOF
                $load

EOF

# Service status >

# Set column width

COLUMNS=3
services=("mangosd" "realmd")

# Sort services

IFS=$'\n' services=($(sort <<<"${services[*]}"))
unset IFS
service_status=()

# Get status of all services

for service in "${services[@]}"; do
service_status+=($(systemctl is-active "$service"))
done >/dev/null 2>&1
out="     "
for i in ${!services[@]}; do

# Color green if service is active, else red

if [[ "${service_status[$i]}" == "active" ]]; then
out+="${services[$i]}:,${color_green}${service_status[$i]}${color_no},"
else
out+="${services[$i]}:,${color_red}${service_status[$i]}${color_no},"
fi

# Insert \n every $COLUMNS column

if [ $((($i+1) % $COLUMNS)) -eq 0 ]; then
out+="\n"
fi
done
out+="\n"

printf "$out" | column -ts $',' | sed -e 's/^/  /'

# Service status done

cat<<EOF

       Start with checking for updates c)

   A : login (command)    p : patch file
   a : create account     o : online check
   t : characters         r : restart server
   u : accounts           s : shutdown server
   g : guilds             m : update CMaNGOS
   e : config             d : update Database
   c : updates            w : update Helper
   l : logs               Q : quit

EOF
 read -n1 -s
 case "$REPLY" in

# Menu done

"a")

# Create account ? > - Holy Shit ! OO

 echo
 echo
read -p "Create Account? (y/n) " -n 1 -r
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then
 echo "Username:";
read USR;
 echo "Password:";
read PWD;
 echo "$user_nc
$pass_nc
.account create $USR $PWD
.account set addon $USR 0
.account set gmlevel $USR 0" > $folder_wow/tmp.txt
nc -q 1 $host_nc $port_nc < $folder_wow/tmp.txt ; rm $folder_wow/tmp.txt
 echo
printf "[\e[1;32mok\033[0m] Account $USR created."
 echo
 echo
 sleep 1
fi

# Create account done

 ;;

"A")

# Login (command) >

 echo
printf "\e[31m   ._________________.
   |.---------------.|
   || \033[0mmangos>\e[31m       ||
   ||               ||
   ||               ||
   ||               ||
   ||               ||
   ||_______________||
   /.-.-.-.-.-.-.-.-.\\
  /.-.-.-.-.-.-.-.-.-.\\
 /.-.-.-.-.-.-.-.-.-.-.\\
/______/__________\___\e[1;32mo\033[1;31m_\\
\_______________________/\033[0m"
 echo
printf "
 CMaNGOS Command Center

 Account Creation Example

 .account create <username> <password>
 .account set addon <username> <expansion-version>
 .account set gmlevel <username> <level>

  ------------------------------------------------
 'commands' will list all of the available commands
 'quit' and then hit Enter to exit
 "
 echo
 echo
read -p "Want to login? (y/n) " -n 1 -r
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then
 echo
nc $host_nc $port_nc
 echo
fi

# Login (command) done

 ;;

"c")

# Checking for updates >

# MaNGOS Core (mangos-classic)

printf "[ Checking for \e[1;32m+\033[1;31m-\033[0m Updates\033[0m ] .. "
 echo

 echo
cd $folder_core
if git checkout master &> /dev/null &&
git fetch origin master &> /dev/null &&
[ `git rev-list HEAD...origin/master --count` != 0 ] &&
git merge origin/master
then
printf "[\033[1;31mold\033[0m] Core Not Updated - "
 git rev-parse --short HEAD
else
printf "[\e[1;32mok\033[0m] Core Updated - "
 git rev-parse --short HEAD
fi

# Classic Database (classic-db)

cd $folder_db
if git checkout master &> /dev/null &&
git fetch origin master &> /dev/null &&
[ `git rev-list HEAD...origin/master --count` != 0 ] &&
git merge origin/master
then
printf "[\033[1;31mold\033[0m] Database Not Updated - "
 git rev-parse --short HEAD
else
printf "[\e[1;32mok\033[0m] Database Updated - "
 git rev-parse --short HEAD
fi

# MaNGOS Helper

cd $folder_helper
if git checkout master &> /dev/null &&
git fetch origin master &> /dev/null &&
[ `git rev-list HEAD...origin/master --count` != 0 ] &&
git merge origin/master
then
printf "[\033[1;31mold\033[0m] Helper Not Updated - "
 git rev-parse --short HEAD
else
printf "[\e[1;32mok\033[0m] Helper Updated - "
 git rev-parse --short HEAD
fi
 echo
 read -p "Press Enter to continue" </dev/tty
 echo

# Checking for updates done

 ;;

"m")

# Update CMaNGOS ? >

 echo
printf "Update classic-mangos [\e[1;32mCore\033[0m] ?"
 echo
 echo
 read -p "Are you sure? (y/n) " -n 1 -r
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then
 echo "Shutting down Services.."
 echo -ne '(0%)\r'
 sleep 1
sudo service realmd stop &> /dev/null
 echo -ne '(50%)\r'
 sleep 1
sudo service mangosd stop &> /dev/null
 echo -ne '(100%)\r'
 sleep 1
printf "Updating mangos-classic (\e[1;32mworld\033[0m).."
 echo
 read -p "Install Software requirements? (y/n) " -n 1 -r
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then
packagelist=(
checkinstall
build-essential
gcc
g++
automake
git-core
autoconf
make
patch
libmysql++-dev
mysql-server
libtool
libssl-dev
grep
binutils
zlibc
libc6
libbz2-dev
cmake
subversion
libboost-all-dev
)
sudo apt-get install ${packagelist[@]} -y 1> /dev/null
fi

# reset --hard origin/master ? >

 read -p "Reset --hard origin/master? (y/n) " -n 1 -r
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then
cd $folder_core
git reset --hard origin/master
fi

# reset --hard origin/master done

# Build from scratch ? >

 read -p "Build from scratch? (y/n) " -n 1 -r
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then
cd
sudo mkdir wow &> /dev/null
sudo chown -R $user:$group $folder_wow
sudo rm -r $folder_core/build/ &> /dev/null
cd $folder_wow
git clone https://github.com/cmangos/mangos-classic.git 2> /dev/null
sudo mkdir $folder_core/build &> /dev/null
fi

# Build from scratch done

sudo chown -R $user:$group $folder_wow
cd $folder_build
cmake .. $cmake
cd $folder_build
make
 echo
printf "Select install operation"
 echo
 echo " 1) make install"
 echo " 2) checkinstall with backup"
 echo
 read n
case $n in
 1) echo "make install"
cd $folder_build
sudo make install
 ;;
 2) echo "checkinstall"
cd $folder_build
sudo checkinstall
 ;;
 *) echo "invalid option"
 ;;
esac
 echo

# Edit/Copy config files ? >

 read -p "Edit config files? (nano) (y/n) " -n 1 -r
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then

 read -p "Copy 'ahbot.conf.dist.in' into run/etc ? (y/n) " -n 1 -r
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then
cp $folder_core/src/game/AuctionHouseBot/ahbot.conf.dist.in $folder_core/run/etc/ahbot.conf.dist &> /dev/null
 echo "run/etc/ahbot.conf.dist created."
fi

title="       Save config without .dist
    ================================
          Server configuration
"
 echo
prompt="

Choose number ->

>"
 echo
options=(

 "mangos.conf.dist"

 "realmd.conf.dist"

 "playerbot.conf.dist"

 "ahbot.conf.dist"

 "mangos.conf"

 "realmd.conf"

 "playerbot.conf"

 "ahbot.conf"

 )

 echo "$title"
PS3="$prompt "
select opt in "${options[@]}" "Quit"; do

case "$REPLY" in

 1 ) echo "You picked $opt $REPLY"
nano $folder_core/run/etc/mangosd.conf.dist;;
 2 ) echo "You picked $opt $REPLY"
nano $folder_core/run/etc/realmd.conf.dist;;
 3 ) echo "You picked $opt $REPLY"
nano $folder_core/run/etc/playerbot.conf.dist;;
 4 ) echo "You picked $opt $REPLY"
nano $folder_core/run/etc/ahbot.conf.dist;;

 5 ) echo "You picked $opt $REPLY"
nano $folder_core/run/etc/mangosd.conf;;
 6 ) echo "You picked $opt $REPLY"
nano $folder_core/run/etc/realmd.conf;;
 7 ) echo "You picked $opt $REPLY"
nano $folder_core/run/etc/playerbot.conf;;
 8 ) echo "You picked $opt $REPLY"
nano $folder_core/run/etc/ahbot.conf;;

$(( ${#options[@]}+1 )) ) echo "
See you next time!
"; break;;
 *) echo "Invalid option. Try another one.";continue;;
esac
done
fi

# Edit/Copy config files done

 read -p "Press Enter to continue" </dev/tty
fi

# Update CMaNGOS done

 ;;

"d")

# Update Database ? >

 echo
printf "Update classic-db [\e[1;32mDatabase\033[0m] ?"
 echo
 echo
 read -p "Are you sure? (y/n) " -n 1 -r
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then
 echo "Shutting down Services.."
 echo -ne '(0%)\r'
 sleep 1
sudo service realmd stop &> /dev/null
 echo -ne '(50%)\r'
 sleep 1
sudo service mangosd stop &> /dev/null
sudo chown -R $user:$group $folder_wow

# BACKUP (regardless) >

mkdir $folder_wow/backup &> /dev/null
mkdir $folder_wow/backup/old &> /dev/null
cp $folder_wow/backup/*.sql $folder_wow/backup/old &> /dev/null
sudo apt-get install zip -y &> /dev/null
zip $folder_wow/backup/old/backup.zip *.sql &> /dev/null
sudo find $folder_wow/backup/old/*.sql -type d -ctime +10 -exec rm -rf {} \; &> /dev/null
 echo -ne '(100%)\r'
 sleep 1
 echo

# Backup <- characters.sql

 echo
FILE="$folder_wow/backup/$db_characters-$NOW.sql"
if [ ! -f "$FILE" ];
then
printf "[\033[1;31mempty\033[0m/old\033[0m] 'Characters' ! Creating backup.."
mysqldump --defaults-extra-file="$sql_mycnf" --column-statistics=0 $db_characters > $folder_wow/backup/$db_characters-$NOW.sql
 echo
else
printf "[\e[1;32mok\033[0m] 'Characters' backup existing."
 echo
fi

# Backup <- realmd.sql

FILE="$folder_wow/backup/$db_realmd-$NOW.sql"
if [ ! -f "$FILE" ];
then
printf "[\033[1;31mempty\033[0m/old\033[0m] 'Realmd' ! Creating backup.."
mysqldump --defaults-extra-file="$sql_mycnf" --column-statistics=0 $db_realmd > $folder_wow/backup/$db_realmd-$NOW.sql
 echo
else
printf "[\e[1;32mok\033[0m] 'Realmd' backup existing."
 echo
fi

# BACKUP done

 echo
printf "Updating classic-db [\e[1;32mdatabase\033[0m]"
 echo
packagelist=(
mysql-server
mysql-client
)
sudo apt-get install ${packagelist[@]} -y 1> /dev/null

# Delete and start over ? >

 read -p "Fresh install? (drop/import databases) (y/n) " -n 1 -r
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then

# Setting Up the cMaNGOS Database.

# Backup <- characters.sql

 echo
FILE="$folder_wow/backup/$db_characters-$NOW.sql"
if [ ! -f "$FILE" ];
then
printf "[\033[1;31mempty\033[0m/old\033[0m] 'Characters' ! Creating backup.."
mysqldump --defaults-extra-file="$sql_mycnf" --column-statistics=0 $db_characters > $folder_wow/backup/$db_characters-$NOW.sql
 echo
else
printf "[\e[1;32mok\033[0m] 'Characters' backup existing."
 echo
fi

# Backup <- realmd.sql

FILE="$folder_wow/backup/$db_realmd-$NOW.sql"
if [ ! -f "$FILE" ];
then
printf "[\033[1;31mempty\033[0m/old\033[0m] 'Realmd' ! Creating backup.."
mysqldump --defaults-extra-file="$sql_mycnf" --column-statistics=0 $db_realmd > $folder_wow/backup/$db_realmd-$NOW.sql
 echo
else
printf "[\e[1;32mok\033[0m] 'Realmd' backup existing"
 echo
fi

# BACKUP done

# DROP Databases >

# DROP Database 'characters'

echo
RESULT=`mysql --defaults-extra-file="$sql_mycnf" -e "SHOW DATABASES" | grep $db_characters`
if [ "$RESULT" == "$db_characters" ]; then
mysqladmin --defaults-extra-file="$sql_mycnf" -f DROP $db_characters;
fi

# DROP Database 'mangos'

RESULT=`mysql --defaults-extra-file="$sql_mycnf" -e "SHOW DATABASES" | grep $db_mangos`
if [ "$RESULT" == "$db_mangos" ]; then
mysqladmin --defaults-extra-file="$sql_mycnf" -f DROP $db_mangos;
fi

# DROP Database 'realmd'

RESULT=`mysql --defaults-extra-file="$sql_mycnf" -e "SHOW DATABASES" | grep $db_realmd`
if [ "$RESULT" == "$db_realmd" ]; then
mysqladmin --defaults-extra-file="$sql_mycnf" -f DROP $db_realmd;
fi

# DROP Databases done

# Delete & git clone classic-db folder ? >

 echo
 read -p "Delete & git clone classic-db folder? (y/n) " -n 1 -r
 echo

if [[ $REPLY =~ ^[Yy]$ ]]
then

sudo chown -R $user:$group $folder_wow
cp $folder_db/InstallFullDB.config $folder_wow &> /dev/null
sudo rm -r $folder_db &> /dev/null
cd $folder_wow
git clone https://github.com/cmangos/classic-db.git
mv $folder_wow/*.config $folder_db &> /dev/null
sudo chown -R $user:$group $folder_wow
fi

# Delete & git clone classic-db folder done
fi

# CREATE Databases >

# CREATE Database 'characters'

 echo
RESULT=`mysql --defaults-extra-file="$sql_mycnf" -e "SHOW DATABASES" | grep $db_characters`
if [ "$RESULT" == "$db_characters" ];
then
printf "[\e[1;32mok\033[0m] 'Characters' database installed."
 echo
else
printf "[\033[1;31mempty\033[0m] 'Characters' importing.."
 echo
mysql --defaults-extra-file="$sql_mycnf" -e "CREATE DATABASE $db_characters CHARACTER SET utf8 COLLATE utf8_general_ci";
mysql --defaults-extra-file="$sql_mycnf" --database=$db_characters < $folder_sql/base/characters.sql
fi

# CREATE Database 'mangos'

RESULT=`mysql --defaults-extra-file="$sql_mycnf" -e "SHOW DATABASES" | grep $db_mangos`
if [ "$RESULT" == "$db_mangos" ];
then
printf "[\e[1;32mok\033[0m] 'Mangos' database installed."
 echo
else
printf "[\033[1;31mempty\033[0m] 'Mangos' importing.."
 echo
mysql --defaults-extra-file="$sql_mycnf" -e "CREATE DATABASE $db_mangos CHARACTER SET utf8 COLLATE utf8_general_ci";
mysql --defaults-extra-file="$sql_mycnf" --database=$db_mangos < $folder_sql/base/mangos.sql
fi

# CREATE Database 'realmd'

RESULT=`mysql --defaults-extra-file="$sql_mycnf" -e "SHOW DATABASES" | grep $db_realmd`
if [ "$RESULT" == "$db_realmd" ];
then
printf "[\e[1;32mok\033[0m] 'Realmd' database installed."
 echo
else
printf "[\033[1;31mempty\033[0m] 'Realmd' importing.."
 echo
mysql --defaults-extra-file="$sql_mycnf" -e "CREATE DATABASE $db_realmd CHARACTER SET utf8 COLLATE utf8_general_ci";
mysql --defaults-extra-file="$sql_mycnf" --database=$db_realmd < $folder_sql/base/realmd.sql
fi
 echo

# CREATE Databases done

# Delete and start over done

# MaNGOS InstallFullDB ? >

read -p "MaNGOS InstallFullDB? (y/n) " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]
then
sudo chown -R $user:$group $folder_wow
cd $folder_db
./InstallFullDB.sh
fi

# MaNGOS InstallFullDB done

# IMPORT BACKUP ? >

 echo
ls -lQ $folder_wow/backup
 echo
 read -p "Import latest backup? (y/n) " -n 1 -r
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then
 echo -ne '(0%)\r'
 sleep 1
mysql --defaults-extra-file="$sql_mycnf" $db_characters < $folder_wow/backup/$db_characters-$NOW.sql;
 echo -ne '(50%)\r'
 sleep 1
mysql --defaults-extra-file="$sql_mycnf" $db_realmd < $folder_wow/backup/$db_realmd-$NOW.sql;
 echo -ne '(100%)\r'
 sleep 1
fi

# IMPORT BACKUP done

 read -p "Press Enter to continue" </dev/tty
fi

# Update Database done

 ;;

"u")

# Accounts >

 echo "User Accounts"
 echo
mysql --defaults-extra-file="$sql_mycnf" --execute="SELECT username, gmlevel, last_ip, DATE_FORMAT(last_login, '%Y-%m-%d') last_login, id FROM $db_realmd.account;"
 read -p "Press Enter to continue" </dev/tty

# Accounts done

 ;;

"t")

# Characters >

 echo "Characters"
 echo
mysql --defaults-extra-file="$sql_mycnf" --execute="SELECT name, level, online, account FROM $db_characters.characters;"
 read -p "Press Enter to continue" </dev/tty

# Characters done

  ;;

"g")

# Guilds >

 echo "Guilds"
 echo
mysql --defaults-extra-file="$sql_mycnf" --execute="SELECT name, motd FROM $db_characters.guild;"
 read -p "Press Enter to continue" </dev/tty

# Guilds done

   ;;

"s")

# Shutdown server ? >> (ﾉ °益°)ﾉ 彡 ┻━┻ holy *@?!1kek .. need muh grindz x()<zz ! OO

 echo
 echo "Shutdown Server?"
 echo
 read -p "Are you sure? (y/n) " -n 1 -r
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then
printf "\033[1;31mShutting down server..\033[0m"
 echo
 echo -ne '(0%)\r'
 sleep 1
sudo service realmd stop &> /dev/null
 echo -ne '(50%)\r'
 sleep 1
sudo service mangosd stop &> /dev/null
 echo -ne '(100%)\r'
 sleep 1
fi

# Shutdown server done << it's over!!

 ;;

"r")

# Restart server ? >

 echo
 echo "Restart Server?"
 echo
 read -p "Are you sure? (y/n) " -n 1 -r
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then
printf "\e[1;32mRestarting server..\033[0m"
 echo
 echo -ne '(0%)\r'
 sleep 1
sudo service realmd restart &> /dev/null
 echo -ne '(50%)\r'
 sleep 1
sudo service mangosd restart &> /dev/null
 echo -ne '(100%)\r'
 sleep 1
printf "\e[1;32m<------------------------------------------------------>\033[0m"
 echo
 echo "Realmd log -->"
 echo
tail $folder_core/run/logs/Realmd.log
 echo
printf "\e[1;32m<------------------------------------------------------>\033[0m"
 echo
 read -n 1 -p "Check server log? (world) (tail/follow/exit) " ans;
 echo
 echo
case $ans in
     t|T)
tail $folder_core/run/logs/Server.log
 echo
printf "\e[1;32m<------------------------------------------------------>\033[0m"
 echo
 read -p "Press Enter to continue" </dev/tty
 ;;
     f|F)
 echo
tail -f $folder_core/run/logs/Server.log
 ;;
 *)
 ;;
esac
fi

# Restart server done

 ;;

"w")

# Update Helper ? >

printf "Update cmangos-script [\e[1;32mHelper\033[0m] ?"
 echo
 echo
 read -p "Are you sure? (y/n) " -n 1 -r
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then
 echo
 echo "Checking your current release"
 echo
 sleep 1
cd $folder_helper
if git checkout master &> /dev/null &&
git fetch origin master &> /dev/null &&
[ `git rev-list HEAD...origin/master --count` != 0 ] &&
git merge origin/master
then
cd $folder_helper
 echo
 sleep 1
printf "[\033[1;31mold\033[0m] -> old release installed!"
 sleep 1
 echo
 echo
printf "[\e[1;32mUpdating Helper\033[0m]"
 echo
 echo
 sudo cp /usr/local/bin/mangos /usr/local/bin/mangos.old &> /dev/null
printf "[\e[1;32mok\033[0m] -> /usr/local/bin/mangos.old"
 sleep 1
 echo
printf "[\e[1;32mok\033[0m] -> Stripping executable on 'mangos.old'"
 sleep 1
 echo
sudo chmod -x /usr/local/bin/mangos.old
sudo chown -R $user:$group $folder_helper
cd $folder_helper
printf "[\e[1;32mok\033[0m] -> Installing new release"
 sleep 1
 echo
sudo cp mangos /usr/local/bin
sudo chmod +x /usr/local/bin/mangos
 sleep 1
printf "[\e[1;32mok\033[0m] -> Installed."
 echo
 echo
 echo "Will exit now."
 sleep 2 && exit
else
cd $folder_helper
printf "[\e[1;32mok\033[0m] Helper - latest release - "
 git rev-parse --short HEAD
 sleep 1
 echo
 read -p "Install regardless? (y/n) " -n 1 -r
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then
 echo
printf "[\e[1;32mUpdating Helper\033[0m]"
 sleep 1
 echo
 echo
printf "[\e[1;32mok\033[0m] -> /usr/local/bin/mangos.old"
 sleep 1
 echo
sudo cp /usr/local/bin/mangos /usr/local/bin/mangos.old &> /dev/null
printf "[\e[1;32mok\033[0m] -> Stripping executable on 'mangos.old'"
 sleep 1
 echo
sudo chmod -x /usr/local/bin/mangos.old
sudo chown -R $user:$group $folder_helper
cd $folder_helper
printf "[\e[1;32mok\033[0m] -> Installing latest release"
 sleep 1
 echo
sudo cp mangos /usr/local/bin
sudo chmod +x /usr/local/bin/mangos
printf "[\e[1;32mok\033[0m] -> Installed."
 echo
 echo
 echo "Will exit now."
 sleep 2 && exit
fi
fi
fi

# Update Helper done

 ;;

"l")

# Check logs >

mkdir $folder_core/run/logs &> /dev/null
printf "\e[1;32m<------------------------------------------------------>\033[0m"
 echo
 echo "Realmd log -->"
 echo
tail $folder_core/run/logs/Realmd.log
 echo
printf "\e[1;32m<------------------------------------------------------>\033[0m"
 echo
 read -n 1 -p "Check server log? (world) (tail/follow/exit) " ans;
 echo
 echo
case $ans in
    t|T)
tail $folder_core/run/logs/Server.log
 echo
printf "\e[1;32m<------------------------------------------------------>\033[0m"
 echo
 read -p "Press Enter to continue" </dev/tty
 ;;
    f|F)
 echo
tail -f $folder_core/run/logs/Server.log
 ;;
    *)
 ;;
esac

# Check logs done

  ;;

"p")

# Create/Apply .patch file ? >

read -p "Create/Apply .patch file? (y/n) " -n 1 -r
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then

printf "Select patch operation"
 echo
 echo " 1) Create patch"
 echo " 2) Apply patch"
 echo
 read n
case $n in
 1) echo "Create patch"
sudo chown -R $user:$group $folder_core
cd $folder_core
git checkout sql/create/db_create_mysql.sql 1> /dev/null
git diff > $patch
 ;;
 2) echo "Apply patch"
cd $folder_core
sudo patch < *.patch -p1
 ;;
 *) echo "invalid option"
 ;;
esac
 echo

 read -p "Download ARM patch (Pi2)? (y/n) " -n 1 -r
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then
cd $folder_core
wget https://raw.githubusercontent.com/Daedalus-code/cmangos-arm/master/arm_pi2.patch
fi

 read -p "Download ARM patch (Pi4)? (y/n) " -n 1 -r
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then
cd $folder_core
wget https://raw.githubusercontent.com/Daedalus-code/cmangos-arm/master/arm_pi4.patch
fi

 read -p "Apply ARM patch? (y/n) " -n 1 -r
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then
cd $folder_core
sudo patch < *.patch -p1
fi

 echo
 read -p "Press Enter to continue" </dev/tty
 echo
fi

# Create/Apply .patch file done

 ;;

"o")

# Online check >

# Internet

 echo
printf "\e[1;32mOnline check\033[0m -> \e[1;32minternet\033[0m/\e[1;32mintranet\033[0m"
 echo
 echo "Checking.."
 echo
if nc -z $internet $realm_port 2>/dev/null; then
printf "\e[1;32m✓\033[0m $server_name - [ $internet ]"
ping -qc1 $internet 2>&1 | awk -F/ '/^rtt/ { printf " - OK %.2f ms\n", $5; ok = 1 } END { if (!ok) print " - FAIL" }'
else
printf "\033[1;31m✗\033[0m $server_name - [ $internet ]"
 echo
fi

# Intranet

if nc -z $intranet $realm_port 2>/dev/null; then
printf "\e[1;32m✓\033[0m $server_name_lan - [ $intranet ]"
ping -qc1 $intranet 2>&1 | awk -F/ '/^rtt/ { printf " - OK %.2f ms\n", $5; ok = 1 } END { if (!ok) print " - FAIL" }'
else
printf "\033[1;31m✗\033[0m $server_name_lan - [ $intranet ]"
 echo
fi
 echo
 read -p "Press Enter to continue" </dev/tty

# Online check done

  ;;

  "e")

# Edit/Copy config files ? >

 read -p "Edit config files? (nano) (y/n) " -n 1 -r
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then

 read -p "Copy 'ahbot.conf.dist.in' into run/etc ? (y/n) " -n 1 -r
 echo
if [[ $REPLY =~ ^[Yy]$ ]]
then
cp $folder_core/src/game/AuctionHouseBot/ahbot.conf.dist.in $folder_core/run/etc/ahbot.conf.dist &> /dev/null
 echo "run/etc/ahbot.conf.dist created."
fi

title="       Save config without .dist
    ================================
          Server configuration
"
 echo
prompt="

Choose number ->

>"
 echo
options=(

 "mangos.conf.dist"

 "realmd.conf.dist"

 "playerbot.conf.dist"

 "ahbot.conf.dist"

 "mangos.conf"

 "realmd.conf"

 "playerbot.conf"

 "ahbot.conf"

)

 echo "$title"
PS3="$prompt "
select opt in "${options[@]}" "Quit"; do

case "$REPLY" in

 1 ) echo "You picked $opt $REPLY"
nano $folder_core/run/etc/mangosd.conf.dist;;
 2 ) echo "You picked $opt $REPLY"
nano $folder_core/run/etc/realmd.conf.dist;;
 3 ) echo "You picked $opt $REPLY"
nano $folder_core/run/etc/playerbot.conf.dist;;
 4 ) echo "You picked $opt $REPLY"
nano $folder_core/run/etc/ahbot.conf.dist;;

 5 ) echo "You picked $opt $REPLY"
nano $folder_core/run/etc/mangosd.conf;;
 6 ) echo "You picked $opt $REPLY"
nano $folder_core/run/etc/realmd.conf;;
 7 ) echo "You picked $opt $REPLY"
nano $folder_core/run/etc/playerbot.conf;;
 8 ) echo "You picked $opt $REPLY"
nano $folder_core/run/etc/ahbot.conf;;

 $(( ${#options[@]}+1 )) ) echo "
 See you next time!
 "; break;;
 *) echo "Invalid option. Try another one.";continue;;
esac
done
fi

# Edit/Copy config files done

    ;;

"Q")  exit                      ;;
"q")  echo "case sensitive!!"   ;;
 * )  echo "invalid option"     ;;
esac
 sleep 1
done

# Script done
